services:
  # app:
  #   build:
  #     context: .
  #     dockerfile: ./docker/${ENVIRONMENT}/app/Dockerfile
  #     args:
  #       VERSION: ${IO_VERSION}
  #   environment:
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${PGPORT}/${IO_PROJECT}_${IO_APP}?schema=public
  #     ENVIRONMENT: ${ENVIRONMENT}
  #     STAGE: ${IO_STAGE}
  #     POSTGRES_DB: ${IO_PROJECT}_${IO_APP}
  #     BASE_URL: ${BASE_URL}
  #   restart: unless-stopped
  #   extends:
  #     file: ./docker/app.yml
  #     service: ${ENVIRONMENT}
  #   networks:
  #     - stack
  #   ports:
  #     - "${PORT}:3333"
  #   links:
  #     - postgres
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   healthcheck:
  #     test: curl --fail -s ${BASE_URL}/status || exit 1
  #     interval: 20s
  #     timeout: 10s
  #     start_period: 10s
  #     retries: 5
  #   volumes:
  #     - /src
    # deploy:
    #   replicas: 6
    #   update_config:
    #     parallelism: 2
    #     delay: 10s
    #     order: start-first
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3
    #     delay: 10s
    #   resources:
    #     limits:
    #       cpus: "0.50"
    #       memory: 512M

  postgres:
    image: postgis/postgis
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${IO_PROJECT}_${IO_APP}
      PGPORT: ${PGPORT}
    restart: unless-stopped
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - data_pgdir:/var/lib/postgresql/data
      - ./docker/entrypoint:/docker-entrypoint-initdb.d
    networks:
      - stack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:7
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_ROOT_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - data_pgadmin:/var/lib/pgadmin
    networks:
      - stack
    profiles:
      - development
      - alpha
      - beta

  mail:
    build:
      context: .
      dockerfile: ./docker/${ENVIRONMENT}/mail/Dockerfile
    restart: unless-stopped
    user: root
    networks:
      - stack
    expose:
      - 1025
      - 8025
    ports:
      - ${MAILHOG_PORT}:8025
    profiles:
      - development

  backup:
    image: postgres
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    restart: "no"
    links:
      - postgres
    volumes:
      - data_backup:/backup
    networks:
      - stack
    command: >
      sh -c  "set -ex &&
        cd /backup &&
        export PGHOST=postgres &&
        export BACKUP_PGDB=$$(date +'%Y_%m_%d_%H_%M_%S')_${IO_PROJECT}_${IO_APP}_${IO_STAGE}_${IO_VERSION}.dump &&
        PGPASSWORD=${POSTGRES_PASSWORD} pg_dump --file ""$$BACKUP_PGDB"" -p ${PGPORT} --format=p --encoding=UTF8 --no-owner --no-privileges --clean --if-exists --verbose ""${IO_PROJECT}_${IO_APP}"" &&
        tar -czf $$BACKUP_PGDB.tar.gz $$BACKUP_PGDB &&
        rm -rf $$BACKUP_PGDB"
    profiles:
      - cli

  restore:
    image: postgres
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    restart: "no"
    links:
      - postgres
    depends_on:
      - postgres
    volumes:
      - data_backup:/backup
    networks:
      - stack
    command: >
      sh -c  'set -ex &&
        cd /backup &&
        export PGHOST=postgres &&
        export FILE_TO_RESTORE=${BACKUP_FILE_TO_RESTORE:-no_file_to_restore} &&
        tar -zxf $$FILE_TO_RESTORE &&
        BACKUP_PGDB=$$FILE_TO_RESTORE &&
        export BACKUP_PGDB=$${BACKUP_PGDB%".tar.gz"} &&
        PGPASSWORD=${POSTGRES_PASSWORD} dropdb -U ${POSTGRES_USER} -p ${PGPORT} ""${IO_PROJECT}_${IO_APP}"" &&
        PGPASSWORD=${POSTGRES_PASSWORD} createdb -U ${POSTGRES_USER} -p ${PGPORT} --encoding UTF8 --locale en_US.utf8 ""${IO_PROJECT}_${IO_APP}""  &&
        PGPASSWORD=${POSTGRES_PASSWORD} psql -U ${POSTGRES_USER} -p ${PGPORT} -d ""${IO_PROJECT}_${IO_APP}"" < $$BACKUP_PGDB &&
        rm -rf $$BACKUP_PGDB'
    profiles:
      - cli

  sanitize:
    image: postgres
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
    restart: "no"
    depends_on:
      - postgres
    links:
      - postgres
    volumes:
      - data_backup:/backup
    networks:
      - stack
    command: >
      sh -c  'set -ex &&
        export PGHOST=postgres &&
        PGPASSWORD=${POSTGRES_PASSWORD} vacuumdb --analyze ""${IO_PROJECT}_${IO_APP}"" --port=${PGPORT} &&
        PGPASSWORD=${POSTGRES_PASSWORD} reindexdb ""${IO_PROJECT}_${IO_APP}"" --port=${PGPORT}'
    profiles:
      - cli

networks:
  stack:
    external: true
    name: ${IO_PROJECT}_${IO_APP}_${IO_STAGE}

volumes:
  data_backup:
    name: ${IO_PROJECT}_${IO_APP}_${IO_STAGE}_backup
    external: true

  data_pgdir:
    name: ${POSTGRES_VOL}
    external: true

  data_pgadmin:
    name: ${PGADMIN_VOL}
    external: true
